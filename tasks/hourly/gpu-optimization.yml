---
# NVIDIA GPU optimization for AI workloads (RTX 3060)
# These tasks run hourly to ensure GPU is optimally configured

- name: "Install NVIDIA drivers and CUDA toolkit"
  apt:
    name:
      - nvidia-driver-575
      - nvidia-dkms-575
      - nvidia-cuda-toolkit
      - nvidia-utils-575
      - build-essential
      - linux-headers-generic
    state: present
    update_cache: yes
  register: nvidia_installation
  ignore_errors: yes

- name: "Check and rebuild NVIDIA DKMS modules if needed"
  shell: |
    # Check DKMS status
    if ! dkms status nvidia | grep -q "installed"; then
      # Clean any corrupted builds
      dkms remove nvidia --all 2>/dev/null || true
      rm -rf /var/lib/dkms/nvidia/*/$(uname -r) 2>/dev/null || true
      
      # Rebuild and install modules
      dkms build nvidia/575.64.03 -k $(uname -r) || true
      dkms install nvidia/575.64.03 -k $(uname -r) || true
      
      # Update module dependencies
      depmod -a
      
      echo "DKMS modules rebuilt"
    else
      echo "DKMS modules already installed"
    fi
  register: dkms_rebuild
  ignore_errors: yes

- name: "Load NVIDIA kernel modules"
  shell: |
    modprobe nvidia || true
    modprobe nvidia_modeset || true  
    modprobe nvidia_drm || true
    modprobe nvidia_uvm || true
  register: nvidia_modules_load
  ignore_errors: yes

- name: "Create NVIDIA configuration directory"
  file:
    path: "/etc/nvidia"
    state: directory
    mode: '0755'

- name: "Configure NVIDIA application profiles for AI optimization"
  copy:
    content: |
      # NVIDIA Application Profiles for AI/ML Workloads
      # Optimized for RTX 3060 in AI-focused environment
      
      profiles {
          profile "Ollama AI Service" {
              rule {
                  pattern {
                      feature = "dso"
                      matches = "*/ollama"
                  }
                  setting "GLThreadedOptimizations" = "1"
                  setting "GLMaxFramesAllowed" = "0"
                  setting "GLSingleGPUPerfPolicy" = "1"
                  setting "GLPowerXpertMode" = "1"
                  setting "GLEnergyOptimization" = "0"
                  setting "GLShaderPortabilityWarnings" = "0"
              }
          }
      }
    dest: "/etc/nvidia/nvidia-application-profiles-rc"
    owner: root
    group: root
    mode: '0644'

- name: "Configure NVIDIA power management for maximum AI performance"
  copy:
    content: |
      # NVIDIA GPU optimization for AI workloads
      # Maximum performance configuration for RTX 3060

      # Power management - maximum performance
      options nvidia NVreg_PowerMizerEnable=0
      options nvidia NVreg_PowerMizerLevel=0
      options nvidia NVreg_PowerMizerDefault=1
      options nvidia NVreg_DynamicPowerManagement=0

      # Memory and compute optimization
      options nvidia NVreg_EnableGpuFirmware=1
      options nvidia NVreg_GSPFirmware=1
      options nvidia NVreg_InitializeSystemMemoryAllocations=0
      options nvidia NVreg_UsePageAttributeTable=1

      # Display and graphics acceleration
      options nvidia_drm modeset=1
      options nvidia_drm fbdev=1

      # CUDA optimization
      options nvidia NVreg_RmLogonRC=1
      options nvidia NVreg_ModifyDeviceFiles=0
    dest: "/etc/modprobe.d/nvidia-ai-performance.conf"
    owner: root
    group: root
    mode: '0644'
  register: nvidia_power_config

- name: "Create GPU AI Performance optimization service"
  copy:
    content: |
      [Unit]
      Description=GPU AI Performance Optimization
      After=graphical.target
      Requires=nvidia-persistenced.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/bash -c '\
        nvidia-smi -pm 1 && \
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo performance > "$cpu"; done && \
        echo never > /sys/kernel/mm/transparent_hugepage/enabled && \
        echo never > /sys/kernel/mm/transparent_hugepage/defrag && \
        echo 1 > /proc/sys/kernel/numa_balancing'
      ExecReload=/bin/bash -c 'nvidia-smi -pm 1'
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target
    dest: "/etc/systemd/system/gpu-ai-performance.service"
    owner: root
    group: root
    mode: '0644'
  register: gpu_ai_performance_service

- name: "Enable and reload GPU AI Performance service"
  systemd:
    name: gpu-ai-performance
    daemon_reload: yes
    enabled: yes
    state: started
  when: gpu_ai_performance_service.changed
  ignore_errors: yes

- name: "Verify GPU detection and optimization"
  shell: "nvidia-smi --query-gpu=name,memory.total,power.management --format=csv,noheader,nounits"
  register: gpu_verification
  ignore_errors: yes

- name: "Log GPU optimization status"
  lineinfile:
    path: "{{ validation_log }}"
    line: "{{ ansible_date_time.iso8601 }} - GPU optimization {{ 'configured - ' + gpu_verification.stdout if gpu_verification.rc == 0 else 'pending (driver installation/reboot required)' }}"